# -*- coding: utf-8 -*-
"""seaborn_prism_conversion

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dfzpD6io4Bmqg4dMVWOxKz7hvf8ma8aq
"""

import pandas as pd
import numpy as np
import glob
import os


def main():

    # Getting file path
    print("Full path to xlsx file : ")
    filename = input()
    while not glob.glob(filename):
        print("Incorrect path! Try again.")
        print("Full path to xlsx file :  ")
        filename = input()

    # Choosing function
    b = True
    print("\nSeaborn to Prism: Press 1")
    print("Prism to Seaborn: Press 2 \n")
    x = input()

    while b:
        if "sb" in filename and x == "1":
            b = False
            seabornToPrism(filename)
        elif "prism" in filename and x == "2":
            b = False
            prismToSeaborn(filename)
        else:
            print("Filename must include \"sb\" or \"prism\"")
            print("\nSeaborn to Prism: Press 1")
            print("Prism to Seaborn: Press 2 \n")
            x = input()


def seabornToPrism(filename):
    sheets_dict = pd.read_excel(filename, sheet_name=None)
    with pd.ExcelWriter(filename[:-7] + "prism.xlsx", mode='w') as writer:

        for name, sheet in sheets_dict.items():
            channels = sheet["mRNA Channel"].unique()  # Getting channels

            # new sheet for each channel
            for channel in channels:
                prism_df = pd.DataFrame(
                    ["0-25", "25-50", "50-75", "75-100", "100-125", "125-150"], columns=["Soma Distance"])
                channel_df = sheet[sheet["mRNA Channel"] == channel]
                dendrites = channel_df["Dendrite"].unique()

                # Combining dataframes
                for dendrite in dendrites:
                    dendrite_df = channel_df[channel_df["Dendrite"]
                                             == dendrite]
                    dendrite_df.reset_index(drop=True, inplace=True)
                    prism_df = pd.concat(
                        [prism_df, dendrite_df["mRNA Count"]], ignore_index=False, axis=1)
                prism_df.to_excel(writer, sheet_name=name +
                                  " " + channel, index=False)


def prismToSeaborn(filename):
    dataframes = {}
    with pd.ExcelWriter(filename[:-10] + "sb.xlsx", mode="w") as writer:
        sheets_dict = pd.read_excel(filename, sheet_name=None)

        for name, sheet in sheets_dict.items():
            # Getting new sheet name for sb excel file
            DIV, treatment, channel = name.split(" ")
            sheetname = DIV + " " + treatment
            DIV = DIV[3:]

            # Filling out dataframe for sheet in prism excel file
            cols = sheet.columns[1:]
            sb_df = pd.DataFrame(
                columns=["Soma Distance", "mRNA Count", "Dendrite"])
            i = 1
            for col in cols:
                dendrite_df = sheet[["Soma Distance", col]].dropna()
                dendrite_df["Dendrite"] = i
                dendrite_df.reset_index(drop=True, inplace=True)
                # rename col to "mRNA Count"
                dendrite_df.columns = [
                    "Soma Distance", "mRNA Count", "Dendrite"]
                sb_df = pd.concat([sb_df, dendrite_df],
                                  axis=0, ignore_index=True)
                i += 1
            sb_df["mRNA Channel"] = channel
            sb_df["DIV"] = DIV
            sb_df["Treatment"] = treatment
            sb_df.reset_index(drop=True, inplace=True)

            # Reordering columns
            sb_df = sb_df[["mRNA Channel", "DIV", "Treatment",
                           "Soma Distance", "Dendrite", "mRNA Count"]]

            # Adding dataframe to dictionary
            if sheetname in dataframes:
                dataframes[sheetname].append(sb_df)
            else:
                dataframes[sheetname] = [sb_df]

        for sheet in dataframes:
            sheet_df = pd.concat(dataframes[sheet], axis=0, ignore_index=True)
            sheet_df.to_excel(writer, sheet_name=sheet,  index=False)


main()
