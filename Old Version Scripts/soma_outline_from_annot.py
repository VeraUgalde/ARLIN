# -*- soma_outline_from_annot -*-
"""Neuro_Imaging_pt1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vx8ZG1UvZLwICwjdIV5EP6mxn29KpHNV
"""

import os
import glob
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from skimage import measure
from datetime import date

def main():
    #Getting path to Images
    print("\n Full path to folder of images: ")
    directory = input()
    
    while not os.path.isdir(directory):
        print("\n Incorrect path, please try again:")
        print("\n Full path to folder of images: ")
        directory = input()
    
    os.chdir(directory)
    
    #Making new subfolder to store prints
    skel_dir = "Prints"
    if not os.path.exists(skel_dir):
        os.makedirs(skel_dir)  
    
    #Getting name of DAPI channel
    dapi_channel = " " 
    print("\n Name of DAPI channel: ")
    print("\n ex: CY7, c7, DAPI, etc")
    dapi_channel = input()
    while not glob.glob("*xy*" + dapi_channel + ".tif"):
        print("\n Incorrect channel name. Try again: ")
        print("\n Name of DAPI channel: ")
        print("\n ex: CY7, c7, DAPI, etc")
        dapi_channel = input()
    
    #Getting mRNA channels
    mRNA_channel = " "
    mRNA_channels = []
    while mRNA_channel != "0":
        print("\n Name of mRNA channel (if done press 0): ")
        print("\n ex: CY5, c5, CY3, c3 etc")
        mRNA_channel = input()
        while not glob.glob("*xy*" + mRNA_channel + ".tif") and mRNA_channel != "0": 
            print("\n Incorrect channel name. Try again: ")
            print("\n Name of mRNA channel (if done press 0): ")
            print("\n ex: CY5, c5, CY3, c3 etc")
            mRNA_channel = input()
        if mRNA_channel != "0":
            mRNA_channels.append(mRNA_channel)
    
    #Getting MAP2 channel
    map2_channel = " " 
    print("\n Name of MAP2 channel: ")
    print("\n ex: CY7, c7, DAPI, etc")
    map2_channel = input()
    while not glob.glob("*xy*" + map2_channel + ".tif"):
        print("\n Incorrect channel name. Try again: ")
        print("\n Name of MAP2 channel: ")
        print("\n ex: CY7, c7, DAPI, etc")
        map2_channel = input()
    
    
    mrna_max_files = glob.glob("MAX*" + map2_channel + ".gif")
    for max_file in mrna_max_files:
        print(os.path.basename(max_file)[:-4])
        mrna_color_files = glob.glob(os.path.basename(max_file)[:-4] + "*color.gif")
        
        if len(mrna_color_files) == 0:
            print("Couldn't find annotated file!")
    
        else:
            prints = []
        
            for color_file in mrna_color_files:
                some_prints= process_soma(color_file)
                
                prints += some_prints
      
            #Save prints in folder
            for i in range(len(prints)):
                Image.fromarray(prints[i]).save(skel_dir +  "/" + os.path.basename(max_file)[:-4] + "_print_" + str(i+1) + ".gif")

            # Getting mrna outlines 
            for mRNA_channel in mRNA_channels:
                print("Channel: " + mRNA_channel)
                end_index = max_file.index(map2_channel)
                print(os.path.basename(max_file)[4:end_index] + mRNA_channel + ".tif")
                raw_file = glob.glob(os.path.basename(max_file)[4:end_index] + mRNA_channel + ".tif")[0]
                dapi_file = glob.glob(os.path.basename(max_file)[4:end_index] + dapi_channel + ".tif")[0]
                  
                #Making new subfolder to store outlines each channel
                channel_dir = "Outlines_" + mRNA_channel
                if not os.path.exists(channel_dir):
                  os.makedirs(channel_dir) 
                  
                getOutlinesTxts(raw_file, dapi_file, channel_dir, prints)
            
def process_soma(color_file):
  color_img = plt.imread(color_file)[:,:,0:3]
  
  #extracting the number of colors used to mark dendrites in color_img
  num_colors = 0
  i = color_file.index("_color.gif")
  if color_file[i-2] == "_":
    num_colors = int(color_file[i-1])
  else:
    num_colors = int(color_file[i-2:i])

  #Pretty colors yay!!
  red  = [255,0,0]
  green = [0,255,0]
  blue   = [0,0,255]
  orange = [255, 147, 0]
  yellow = [255, 255, 0]
  purple = [153, 41, 189]
  teal  = [83, 219, 196]
  mint = [204, 252, 216]
  maroon = [159, 17, 0]
  salmon = [255, 128, 110]
  colors = [red, green, blue, orange, yellow, purple, teal, mint, maroon, salmon]

  prints = []

  #extracting individual dendrites from image
  j = 0
  for color in colors:
    if j < num_colors:
        mask = np.where(np.all(color_img == color, axis=-1), 255, 0)
        prints.append(mask.astype(np.uint8))
        j+=1

  return prints


def getOutlinesTxts(channel_img, dapi_img, channel_dir, prints):

  
  outline_txt = open(channel_dir + "/" + channel_img[:-4] + "__outline.txt", "a")

  outline_txt.write("FISH-QUANT\n")
  outline_txt.write("File-version   3D_v1\n")
  outline_txt.write("RESULTS OF SPOT DETECTION PERFORMED ON " + date.today().strftime("%d-%b-%Y") + "\n")
  outline_txt.write("COMMENT	Automated outline definition (batch or quick-save)\n")
  outline_txt.write("IMG_Raw\t" + channel_img + "\n")
  outline_txt.write("IMG_Filtered\n")
  outline_txt.write("IMG_DAPI\t" + dapi_img + "\n")
  outline_txt.write("IMG_TS_label\n")
  outline_txt.write("FILE_settings\n")
  outline_txt.write("PARAMETERS\n")
  outline_txt.write("Pix-XY	Pix-Z	RI	Ex	Em	NA	Type\n")
  outline_txt.write("107.5	300	1.35	547	583	1.4	widefield\n")

  for i in range(len(prints)):

    #getting counterclockwise list of pixels on outlines
    contours = measure.find_contours(prints[i], 0)
    contours = np.array(contours)
    if np.shape(contours)[0] >= 2:
        print("This outline is sketchy!")
        """
        if len(contours[0]) > len(contours[1]):
            contours = np.array([contours[0]])
        else:
            contours = np.array([contours[1]])
        """
        contours = np.array([find_max_list(contours)])
    elif np.shape(contours)[0] == 0:
        print("Colours are wrong in this image!")
        break
    contours = contours.reshape(contours.shape[1:])

    outline_txt.write("CELL_START\tCell_" + str(i+1) + "\n")

    outline_txt.write("X_POS")
    for i in range(len(contours)):
     if i % 10 == 0:
        outline_txt.write("\t" + str(int(contours[i][1])))

    outline_txt.write("\nY_POS")
    for i in range(len(contours)):
      if i % 10 == 0:
        outline_txt.write("\t" + str(int(contours[i][0])))

    outline_txt.write("\nZ_Pos\n")
    outline_txt.write("CELL_END\n")

  outline_txt.close()

  return


def find_max_list(list):
    list_len = [len(i) for i in list]
    return list[np.argmax(np.array(list_len))]

main()